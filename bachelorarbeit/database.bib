% Encoding: UTF-8

@InProceedings{AutomaticQualityAssessmentofSourceCodeComments:TheJavadocMiner,
  author    = {Khamis, Ninus and Witte, Ren{\'e} and Rilling, Juergen},
  title     = {Automatic Quality Assessment of Source Code Comments: The JavadocMiner},
  booktitle = {Natural Language Processing and Information Systems},
  year      = {2010},
  editor    = {Hopfe, Christina J. and Rezgui, Yacine and M{\'e}tais, Elisabeth and Preece, Alun and Li, Haijiang},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-642-13881-2},
  pages     = {68--79},
  abstract  = {An important software engineering artefact used by developers and maintainers to assist in software comprehension and maintenance is source code documentation. It provides insights that help software engineers to effectively perform their tasks, and therefore ensuring the quality of the documentation is extremely important. Inline documentation is at the forefront of explaining a programmer's original intentions for a given implementation. Since this documentation is written in natural language, ensuring its quality needs to be performed manually. In this paper, we present an effective and automated approach for assessing the quality of inline documentation using a set of heuristics, targeting both quality of language and consistency between source code and its comments. We apply our tool to the different modules of two open source applications (ArgoUML and Eclipse), and correlate the results returned by the analysis with bug defects reported for the individual modules in order to determine connections between documentation and code quality.},
  address   = {Berlin, Heidelberg},
}

@Article{SoftwareDocumentationManagementIssuesandPractices:ASurvey,
  author  = {C J, Satish and Mahendran, Anand},
  title   = {Software Documentation Management Issues and Practices: A Survey},
  journal = {Indian Journal of Science and Technology},
  year    = {2016},
  volume  = {9},
  month   = {05},
  doi     = {10.17485/ijst/2016/v9i20/86869},
}

@InProceedings{Qualityanalysisofsourcecodecomments,
  author    = {Steidl, Daniela and Hummel, Benjamin and Juergens, Elmar},
  title     = {Quality analysis of source code comments},
  booktitle = {2013 21st International Conference on Program Comprehension (ICPC)},
  year      = {2013},
  pages     = {83-92},
  doi       = {10.1109/ICPC.2013.6613836},
}

@WWW{PMD,
  title = {PMD},
  date  = {2021-10-20},
  url   = {https://pmd.github.io/},
}

@WWW{Checkstyle,
  title = {Checkstyle},
  date  = {2021-10-20},
  url   = {https://checkstyle.sourceforge.io/},
}

@WWW{ANTLR,
  title = {ANTLR},
  date  = {2021-10-20},
  url   = {https://www.antlr.org/},
}

@WWW{GithubActions,
  title = {Github Actions},
  date  = {2021-10-20},
  url   = {https://docs.github.com/en/actions},
}

@WWW{ANTLRgrammarforjava,
  title = {ANTLR grammar for java},
  date  = {2021-10-20},
  url   = {https://github.com/antlr/grammars-v4/tree/master/java},
}

@InProceedings{EvaluatingtheQualityoftheDocumentationofOpenSourceSoftware,
  author    = {Lerina Aversano and Daniela Guardabascio and Maria Tortorella},
  title     = {Evaluating the Quality of the Documentation of Open Source Software},
  booktitle = {ENASE},
  year      = {2017},
}

@Article{Qualitycontrolinsoftwaredocumentationbasedonmeasurementoftextcomprehensionandtextcomprehensibility,
  author   = {Franz Lehner},
  title    = {Quality control in software documentation based on measurement of text comprehension and text comprehensibility},
  journal  = {Information Processing \& Management},
  year     = {1993},
  volume   = {29},
  number   = {5},
  pages    = {551-568},
  issn     = {0306-4573},
  doi      = {https://doi.org/10.1016/0306-4573(93)90079-S},
  url      = {https://www.sciencedirect.com/science/article/pii/030645739390079S},
  abstract = {The importance of software documentation and the effects of poor documentation in data processing are often underrated. Little research has been published that evaluates the quality of software documentation. The evaluation of textual attributes such as comprehensibility, readability, etc., has seen more studies and relatively sound results. Thus this paper exclusively handles textual documentation, whereby the methods are employed for the evaluation of software documentation. We first introduce the methods used in the measurement of text comprehensibility. Then RMS (Readability Measuring System), a tool developed by the author to support the measuring process, is presented. The third part of the paper presents empirical results and discusses the experience gained in the application of the RMS tool.},
}

@InProceedings{TheValueofSoftwareDocumentationQuality,
  author    = {Plösch, Reinhold and Dautovic, Andreas and Saft, Matthias},
  title     = {The Value of Software Documentation Quality},
  booktitle = {2014 14th International Conference on Quality Software},
  year      = {2014},
  pages     = {333-342},
  doi       = {10.1109/QSIC.2014.22},
}

@InProceedings{SoftwareDocumentationIssuesUnveiled,
  author    = {Aghajani, Emad and Nagy, Csaba and Vega-Márquez, Olga Lucero and Linares-Vásquez, Mario and Moreno, Laura and Bavota, Gabriele and Lanza, Michele},
  title     = {Software Documentation Issues Unveiled},
  booktitle = {2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
  year      = {2019},
  pages     = {1199-1210},
  doi       = {10.1109/ICSE.2019.00122},
}

@InProceedings{OpenSourceSoftwareDocumentationMiningforQualityAssessment,
  author    = {Nuno Ramos Carvalho and Alberto Sim{\~o}es and Jos{\'e} Jo{\~a}o Almeida},
  title     = {Open Source Software Documentation Mining for Quality Assessment},
  booktitle = {WorldCIST},
  year      = {2013},
}

@Article{RecoveringTraceabilityLinksbetweenCodeandDocumentation,
  author  = {Antoniol, Giuliano and Canfora, Gerardo and Casazza, Gerardo and Lucia, Andrea and Merlo, Ettore},
  title   = {Recovering Traceability Links between Code and Documentation},
  journal = {Software Engineering, IEEE Transactions on},
  year    = {2002},
  volume  = {28},
  month   = {11},
  pages   = {970- 983},
  doi     = {10.1109/TSE.2002.1041053},
}

@Article{AutomatedEvaluationofSourceCodeDocumentation:InterimReport,
  author = {Hirsch, Ben and Heines, Jesse},
  title  = {Automated Evaluation of Source Code Documentation: Interim Report},
  year   = {2008},
  month  = {07},
}

@Article{ANTLR:APredicated-<i>LLk</i>ParserGenerator,
  author     = {Parr, T. J. and Quong, R. W.},
  title      = {ANTLR: A Predicated-<i>LL(k)</i> Parser Generator},
  journal    = {Softw. Pract. Exper.},
  year       = {1995},
  volume     = {25},
  number     = {7},
  month      = jul,
  pages      = {789–810},
  issn       = {0038-0644},
  doi        = {10.1002/spe.4380250705},
  url        = {https://doi.org/10.1002/spe.4380250705},
  address    = {USA},
  issue_date = {July 1995},
  keywords   = {parsing, parser generator, compiler, predicates, LL(k) parser},
  numpages   = {22},
  publisher  = {John Wiley \&amp; Sons, Inc.},
}

@Article{ComparativeStudyoftheQualityAssessmentToolsBasedonaModel:SonarSqualeEvalMetrics,
  author  = {Bougroun, Zineb and Zeaaraoui, Adil and Toumi, Bouchentouf},
  title   = {Comparative Study of the Quality Assessment Tools Based on a Model: Sonar, Squale, EvalMetrics},
  journal = {Journal of Computer Science},
  year    = {2016},
  volume  = {12},
  month   = {01},
  pages   = {39-47},
  doi     = {10.3844/jcssp.2016.39.47},
}

@InProceedings{Automaticassessmentofsoftwaredocumentationquality,
  author    = {Dautovic, Andreas},
  title     = {Automatic assessment of software documentation quality},
  booktitle = {2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)},
  year      = {2011},
  pages     = {665-669},
  doi       = {10.1109/ASE.2011.6100151},
}

@Article{DMOSS:Opensourcesoftwaredocumentationassessment,
  author  = {Nuno Ramos Carvalho and Alberto Sim{\~o}es and Jos{\'e} Jo{\~a}o Almeida},
  title   = {DMOSS: Open source software documentation assessment},
  journal = {Comput. Sci. Inf. Syst.},
  year    = {2014},
  volume  = {11},
  pages   = {1197-1207},
}

@Article{Softwaredocumentation,
  author  = {Sommerville, Ian},
  title   = {Software documentation},
  journal = {Software engineering},
  year    = {2001},
  volume  = {2},
  pages   = {143--154},
}

@InProceedings{HowDocumentationEvolvesoverTime,
  author    = {Schreck, Daniel and Dallmeier, Valentin and Zimmermann, Thomas},
  title     = {How Documentation Evolves over Time},
  booktitle = {Ninth International Workshop on Principles of Software Evolution: In Conjunction with the 6th ESEC/FSE Joint Meeting},
  year      = {2007},
  series    = {IWPSE '07},
  publisher = {Association for Computing Machinery},
  location  = {Dubrovnik, Croatia},
  isbn      = {9781595937223},
  pages     = {4–10},
  doi       = {10.1145/1294948.1294952},
  url       = {https://doi.org/10.1145/1294948.1294952},
  abstract  = {Good source code documentation, especially of programming interfaces, is essential
for using and maintaining software components. In this paper, we present the Quasoledo
tool that automatically measures the quality of documentation with respect to completeness,
quantity, and readability. We applied our set of metrics to the Eclipse project, and
benchmarked against the well-documented Java class library. The result of Quasoledo
is a map of documentation quality in Eclipse, showing the best documentation for its
core components. Additionally, we looked at the evolution of Eclipse and identified
batch updates that caused jumps in documentation quality. For Eclipse, only 32.6%
of all changes touched documentation.},
  address   = {New York, NY, USA},
  numpages  = {7},
}

@Article{SMSCQA:SystemforMeasuringSourceCodeQualityAssurance,
  author  = {Ayman, Hussein and Odeh, Ayman},
  title   = {SMSCQA: System for Measuring Source Code Quality Assurance},
  journal = {International Journal of Computer Applications},
  year    = {2012},
  volume  = {60},
  month   = {12},
  pages   = {975-8887},
  doi     = {10.5120/9714-4181},
}

@InProceedings{JavadocViolationsandTheirEvolutioninOpen-SourceSoftware,
  author    = {Steinbeck, Marcel and Koschke, Rainer},
  title     = {Javadoc Violations and Their Evolution in Open-Source Software},
  booktitle = {2021 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  year      = {2021},
  pages     = {249-259},
  doi       = {10.1109/SANER50967.2021.00031},
}

@InProceedings{Exstatic:AGenericStaticCheckerAppliedtoDocumentationSystems,
  author    = {Mount, S. N. I. and Newman, R. M. and Low, R. J. and Mycroft, A.},
  title     = {Exstatic: A Generic Static Checker Applied to Documentation Systems},
  booktitle = {Proceedings of the 22nd Annual International Conference on Design of Communication: The Engineering of Quality Documentation},
  year      = {2004},
  series    = {SIGDOC '04},
  publisher = {Association for Computing Machinery},
  location  = {Memphis, Tennessee, USA},
  isbn      = {1581138091},
  pages     = {52–57},
  doi       = {10.1145/1026533.1026548},
  url       = {https://doi.org/10.1145/1026533.1026548},
  abstract  = {Exstatic is a generic static checker developed by the author to address many of the
practical problems in program development. Static checking provides a valuable means
for automating time consuming checks not only concerned with program correctness (writing
the right program), but also to do with style (writing the program right). Previous
static checkers have been closely coupled with compilation systems, and therefore
tend to be applicable to the code itself and not to all of the textual information
(such as makefiles, comments, documentation sources) surrounding the code. The generic
nature of Exstatic allows it to overcome these boundaries, and indeed it can be applied
to any medium for which there is a formally definable syntax and (to an extent) semantics.
Exstatic can therefore be used to increase the productivity and quality of documentation
of programs, checking for such things as adherence to house style, consistency with
the program being documented and self consistency. This paper describes the design
and use of Exstatic, with particular reference to its use in documentation systems.},
  address   = {New York, NY, USA},
  keywords  = {static checking, standards, javadoc, exstatic, docstrings},
  numpages  = {6},
}

@InProceedings{@tComment:TestingJavadocCommentstoDetectComment-CodeInconsistencies,
  author  = {Tan, Shin Hwei and Marinov, Darko and Tan, Lin and Leavens, Gary},
  title   = {@tComment: Testing Javadoc Comments to Detect Comment-Code Inconsistencies},
  year    = {2012},
  volume  = {abs/1201.6078},
  month   = {04},
  doi     = {10.1109/ICST.2012.106},
  journal = {CoRR},
}

@Article{ImplementingSourceCodeMetricsforSoftwarequalityanalysis,
  author  = {Mandeep K. Chawla and Indu Chhabra},
  title   = {Implementing Source Code Metrics for Software quality analysis},
  journal = {International journal of engineering research and technology},
  year    = {2012},
  volume  = {1},
}

@Article{CommentingonCodeConsideringDatasBottleneck,
  author     = {Torres, Edwin and Saba, Walid},
  title      = {Commenting on Code, Considering Data's Bottleneck},
  journal    = {Commun. ACM},
  year       = {2018},
  volume     = {61},
  number     = {5},
  month      = apr,
  pages      = {24–25},
  issn       = {0001-0782},
  doi        = {10.1145/3193752},
  url        = {https://doi.org/10.1145/3193752},
  abstract   = {The Communications Web site, http://cacm.acm.org, features more than a dozen bloggers
in the BLOG@CACM community. In each issue of Communications, we'll publish selected
posts or excerpts.twitterFollow us on Twitter at http://twitter.com/blogCACMhttp://cacm.acm.org/blogs/blog-cacmEdwin
Torres considers the enduring value of code comments, while Walid Saba wonders if
we have overreacted to the knowledge acquisition bottleneck.},
  address    = {New York, NY, USA},
  issue_date = {May 2018},
  numpages   = {2},
  publisher  = {Association for Computing Machinery},
}

@Article{StaticAnalysis:AnIntroduction:TheFundamentalChallengeofSoftwareEngineeringisOneofComplexity.,
  author     = {Thomson, Patrick},
  title      = {Static Analysis: An Introduction: The Fundamental Challenge of Software Engineering is One of Complexity.},
  journal    = {Queue},
  year       = {2021},
  volume     = {19},
  number     = {4},
  month      = aug,
  pages      = {29–41},
  issn       = {1542-7730},
  doi        = {10.1145/3487019.3487021},
  url        = {https://doi.org/10.1145/3487019.3487021},
  abstract   = {Modern static-analysis tools provide powerful and specific insights into codebases.
The Linux kernel team, for example, developed Coccinelle, a powerful tool for searching,
analyzing, and rewriting C source code; because the Linux kernel contains more than
27 million lines of code, a static-analysis tool is essential both for finding bugs
and for making automated changes across its many libraries and modules. Another tool
targeted at the C family of languages is Clang scan-build, which comes with many useful
analyses and provides an API for programmers to write their own analyses. Like so
many things in computer science, the utility of static analysis is self-referential:
To write reliable programs, we must also write programs for our programs. But this
is no paradox. Static-analysis tools, complex though their theory and practice may
be, are what will enable us, and engineers of the future, to overcome this challenge
and yield the knowledge and insights that we practitioners deserve.},
  address    = {New York, NY, USA},
  issue_date = {July-August 2021},
  numpages   = {13},
  publisher  = {Association for Computing Machinery},
}

@Article{DocumentationTesting,
  author     = {Mamone, Salvatore},
  title      = {Documentation Testing},
  journal    = {SIGSOFT Softw. Eng. Notes},
  year       = {2000},
  volume     = {25},
  number     = {2},
  month      = mar,
  pages      = {26–29},
  issn       = {0163-5948},
  doi        = {10.1145/346057.346066},
  url        = {https://doi.org/10.1145/346057.346066},
  abstract   = {One definition of documentation is 'Any written or pictorial information describing,
defining, specifying, reporting, or certifying activities, requirements, procedures,
or results.' (1). Documentation is as important to a product's success as the product
itself. If the documentation is poor, non-existent, or wrong, it reflects on the quality
of the product and the vendor.At the Bell Atlantic Systems Integration &amp; Testing
Center documentation testing is an important function that receives as much attention
as the testing of software and hardware. Because the Bell Atlantic Systems Integration
&amp; Testing Center is ISO9001 certified, an enormous effort was undertaken to ensure
quality assurance of all products including documentation. Both a test procedure and
test plan for documentation has been implemented to ensure this quality.This article
will describe what documentation is, why document testing is important, and how document
testing is performed at the Bell Atlantic Systems Integration &amp; Testing Center.Other
information pertaining to documentation, such as human factors, how to achieve document
comprehensiveness, and comprehensibility, although important, are beyond the reach
of this report.},
  address    = {New York, NY, USA},
  issue_date = {March 2000},
  numpages   = {4},
  publisher  = {Association for Computing Machinery},
}

@Article{IEEEStandardGlossaryofSoftwareEngineeringTerminology,
  title   = {IEEE Standard Glossary of Software Engineering Terminology},
  journal = {IEEE Std 610.12-1990},
  year    = {1990},
  pages   = {1-84},
  doi     = {10.1109/IEEESTD.1990.101064},
}

@Article{Softwaredocumentation:frominstructiontointegration,
  author  = {Barker, T.T.},
  title   = {Software documentation: from instruction to integration},
  journal = {IEEE Transactions on Professional Communication},
  year    = {1990},
  volume  = {33},
  number  = {4},
  pages   = {172-177},
  doi     = {10.1109/47.62811},
}

@Article{Softwaredocumentationandstandards,
  author  = {J. M. Jose and T. Viswanathan},
  title   = {Software documentation and standards},
  journal = {Annals of library science and documentation},
  year    = {1992},
  volume  = {39},
  pages   = {123-133},
}

@InProceedings{TheRelevanceofSoftwareDocumentationToolsandTechnologies:ASurvey,
  author    = {Forward, Andrew and Lethbridge, Timothy C.},
  title     = {The Relevance of Software Documentation, Tools and Technologies: A Survey},
  booktitle = {Proceedings of the 2002 ACM Symposium on Document Engineering},
  year      = {2002},
  series    = {DocEng '02},
  publisher = {Association for Computing Machinery},
  location  = {McLean, Virginia, USA},
  isbn      = {1581135947},
  pages     = {26–33},
  doi       = {10.1145/585058.585065},
  url       = {https://doi.org/10.1145/585058.585065},
  abstract  = {This paper highlights the results of a survey of software professionals. One of the
goals of this survey was to uncover the perceived relevance (or lack thereof) of software
documentation, and the tools and technologies used to maintain, verify and validate
such documents. The survey results highlight the preferences for and aversions against
software documentation tools. Participants agree that documentation tools should seek
to better extract knowledge from core resources. These resources include the system's
source code, test code and changes to both. Resulting technologies could then help
reduce the effort required for documentation maintenance, something that is shown
to rarely occur. Our data reports compelling evidence that software professionals
value technologies that improve automation of the documentation process, as well as
facilitating its maintenance.},
  address   = {New York, NY, USA},
  keywords  = {software maintenance, software documentation, program comprehension, documentation survey, documentation technologies, documentation relevance, software engineering},
  numpages  = {8},
}

@Article{CostBenefitsandQualityofSoftwareDevelopmentDocumentation:ASystematicMapping,
  author  = {Zhi, Junji and Garousi, Vahid and Sun, Bo and Garousi, Golara and Shahnewaz, S. and Ruhe, Guenther},
  title   = {Cost, Benefits and Quality of Software Development Documentation: A Systematic Mapping},
  journal = {Journal of Systems and Software},
  year    = {2014},
  volume  = {99},
  month   = {01},
  doi     = {10.1016/j.jss.2014.09.042},
}

@WWW{Javadoc,
  title   = {Javadoc},
  url     = {https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html},
  urldate = {2021-10-21},
}

@Comment{jabref-meta: databaseType:biblatex;}