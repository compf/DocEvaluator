import { ATN } from "antlr4ts/atn/ATN";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { Vocabulary } from "antlr4ts/Vocabulary";
export declare class JavaLexer extends Lexer {
    static readonly ABSTRACT = 1;
    static readonly ASSERT = 2;
    static readonly BOOLEAN = 3;
    static readonly BREAK = 4;
    static readonly BYTE = 5;
    static readonly CASE = 6;
    static readonly CATCH = 7;
    static readonly CHAR = 8;
    static readonly CLASS = 9;
    static readonly CONST = 10;
    static readonly CONTINUE = 11;
    static readonly DEFAULT = 12;
    static readonly DO = 13;
    static readonly DOUBLE = 14;
    static readonly ELSE = 15;
    static readonly ENUM = 16;
    static readonly EXTENDS = 17;
    static readonly FINAL = 18;
    static readonly FINALLY = 19;
    static readonly FLOAT = 20;
    static readonly FOR = 21;
    static readonly IF = 22;
    static readonly GOTO = 23;
    static readonly IMPLEMENTS = 24;
    static readonly IMPORT = 25;
    static readonly INSTANCEOF = 26;
    static readonly INT = 27;
    static readonly INTERFACE = 28;
    static readonly LONG = 29;
    static readonly NATIVE = 30;
    static readonly NEW = 31;
    static readonly PACKAGE = 32;
    static readonly PRIVATE = 33;
    static readonly PROTECTED = 34;
    static readonly PUBLIC = 35;
    static readonly RETURN = 36;
    static readonly SHORT = 37;
    static readonly STATIC = 38;
    static readonly STRICTFP = 39;
    static readonly SUPER = 40;
    static readonly SWITCH = 41;
    static readonly SYNCHRONIZED = 42;
    static readonly THIS = 43;
    static readonly THROW = 44;
    static readonly THROWS = 45;
    static readonly TRANSIENT = 46;
    static readonly TRY = 47;
    static readonly VOID = 48;
    static readonly VOLATILE = 49;
    static readonly WHILE = 50;
    static readonly DECIMAL_LITERAL = 51;
    static readonly HEX_LITERAL = 52;
    static readonly OCT_LITERAL = 53;
    static readonly BINARY_LITERAL = 54;
    static readonly FLOAT_LITERAL = 55;
    static readonly HEX_FLOAT_LITERAL = 56;
    static readonly BOOL_LITERAL = 57;
    static readonly CHAR_LITERAL = 58;
    static readonly STRING_LITERAL = 59;
    static readonly NULL_LITERAL = 60;
    static readonly LPAREN = 61;
    static readonly RPAREN = 62;
    static readonly LBRACE = 63;
    static readonly RBRACE = 64;
    static readonly LBRACK = 65;
    static readonly RBRACK = 66;
    static readonly SEMI = 67;
    static readonly COMMA = 68;
    static readonly DOT = 69;
    static readonly ASSIGN = 70;
    static readonly GT = 71;
    static readonly LT = 72;
    static readonly BANG = 73;
    static readonly TILDE = 74;
    static readonly QUESTION = 75;
    static readonly COLON = 76;
    static readonly EQUAL = 77;
    static readonly LE = 78;
    static readonly GE = 79;
    static readonly NOTEQUAL = 80;
    static readonly AND = 81;
    static readonly OR = 82;
    static readonly INC = 83;
    static readonly DEC = 84;
    static readonly ADD = 85;
    static readonly SUB = 86;
    static readonly MUL = 87;
    static readonly DIV = 88;
    static readonly BITAND = 89;
    static readonly BITOR = 90;
    static readonly CARET = 91;
    static readonly MOD = 92;
    static readonly ADD_ASSIGN = 93;
    static readonly SUB_ASSIGN = 94;
    static readonly MUL_ASSIGN = 95;
    static readonly DIV_ASSIGN = 96;
    static readonly AND_ASSIGN = 97;
    static readonly OR_ASSIGN = 98;
    static readonly XOR_ASSIGN = 99;
    static readonly MOD_ASSIGN = 100;
    static readonly LSHIFT_ASSIGN = 101;
    static readonly RSHIFT_ASSIGN = 102;
    static readonly URSHIFT_ASSIGN = 103;
    static readonly ARROW = 104;
    static readonly COLONCOLON = 105;
    static readonly AT = 106;
    static readonly ELLIPSIS = 107;
    static readonly WS = 108;
    static readonly JCOMMENT = 109;
    static readonly COMMENT = 110;
    static readonly LINE_COMMENT = 111;
    static readonly IDENTIFIER = 112;
    static readonly channelNames: string[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    constructor(input: CharStream);
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    get channelNames(): string[];
    get modeNames(): string[];
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
